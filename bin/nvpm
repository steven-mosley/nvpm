#!/usr/bin/env bash

set -e

# Set NVPM_ROOT if not already set
NVPM_ROOT="${NVPM_ROOT:-$HOME/.nvpm}"
NVPM_SRC="${NVPM_SRC:-$NVPM_ROOT/src}"
NVPM_REPO="https://github.com/steven-mosley/nvpm.git"
VERSION_FILE="$NVPM_ROOT/version"

# Load configuration, logging, and core functions
source "$NVPM_SRC/core/config.sh"
source "$NVPM_SRC/core/logging.sh"
source "$NVPM_SRC/core/profile.sh"
source "$NVPM_SRC/ui/menu.sh"

# Function to fetch the latest version information from GitHub
fetch_latest_version_info() {
    # Clone the repository to a temporary directory to fetch the latest version file
    local tmp_dir
    tmp_dir=$(mktemp -d)
    git clone --depth=1 "$NVPM_REPO" "$tmp_dir" >/dev/null 2>&1 || {
        log_error "Failed to fetch the latest version information."
        rm -rf "$tmp_dir"
        return 1
    }
    
    if [ -f "$tmp_dir/version" ]; then
        cat "$tmp_dir/version"
    else
        log_error "Version file not found in the repository."
        rm -rf "$tmp_dir"
        return 1
    fi

    rm -rf "$tmp_dir"
}

# Function to check for updates
check_for_updates() {
    local remote_version local_version

    # Fetch remote version information
    remote_version=$(fetch_latest_version_info) || return 1

    # Check if local version file exists, if not create it with version 0.1
    if [ ! -f "$VERSION_FILE" ]; then
        echo "0.1" > "$VERSION_FILE"
    fi
    local_version=$(cat "$VERSION_FILE")

    # Compare versions and notify the user if an update is available
    if [ "$remote_version" != "$local_version" ]; then
        log_info "A new version ($remote_version) is available. Run 'nvpm update' to update."
    fi
}

# Show usage information
usage() {
    cat << EOF
NVPM - Neovim Profile Manager v$(cat "$VERSION_FILE" 2>/dev/null || echo "0.1")

Usage: nvpm <command> [options]

Commands:
    create <name>                  Create a new Neovim profile
    list                           List all available profiles
    global <name>                  Set a system wide global profile
    remove <name>                  Remove a profile
    current                        Show current active profile
    exec <program>                 Execute the given program with the NVIM_APPNAME set
    update                         Update NVPM to the latest version
    version                        Show NVPM version
    help                           Show this help message

Examples:
    nvpm create my-config
    nvpm list
    nvpm global my-config
    nvpm remove my-config
    nvpm exec nvim
    nvpm update

For more information, visit: https://github.com/steven-mosley/nvpm
EOF
}

# Exec command to route through NVPM
exec_nvim() {
    local program="$1"
    shift

    # Determine the active profile
    local active_profile_name
    active_profile_name="$(cat "$NVPM_ROOT/global_profile" 2>/dev/null || echo "default")"
    
    if [ ! -f "$NVPM_ROOT/wrappers/$active_profile_name" ]; then
        log_error "Wrapper script does not exist for profile: $active_profile_name"
        exit 1
    fi
    
    NVIM_APPNAME="nvpm/$active_profile_name" exec /usr/bin/nvim "$@"
}

# Main entry point
main() {
    # Check for updates
    check_for_updates

    # Execute the appropriate command
    case "$1" in
        "create")
            create_profile "${@:2}"
            ;;
        "list")
            list_profiles
            ;;
        "global")
            global_profile "${@:2}"
            ;;
        "remove")
            remove_profile "${@:2}"
            ;;
        "current")
            current_profile
            ;;
        "exec")
            if [[ "$2" == "nvim" ]]; then
                exec_nvim "${@:3}"
            else
                log_error "Unknown exec target: $2"
                usage
                exit 1
            fi
            ;;
        "update")
            "$NVPM_SRC/core/update.sh"
            ;;
        "version")
            echo "nvpm version $(cat "$VERSION_FILE" 2>/dev/null || echo "0.1")"
            ;;
        "help"|"--help"|"-h"|"")
            usage
            ;;
        *)
            # Display error message and usage, do not re-run the script
            log_error "Unknown command: $1"
            usage
            exit 1
            ;;
    esac
}

# Run the main function with all arguments
main "$@"
