#!/usr/bin/env bash

set -e

# Set NVPM_ROOT and NVPM_CACHE if not already set
NVPM_ROOT="${NVPM_ROOT:-$HOME/.nvpm}"
NVPM_CACHE="${NVPM_CACHE:-$NVPM_ROOT/cache}"
NVPM_SRC="${NVPM_SRC:-$NVPM_ROOT/src}"

# Load configuration, logging, and core functions
source "$NVPM_SRC/core/config.sh"
source "$NVPM_SRC/core/logging.sh"
source "$NVPM_SRC/core/profile.sh"
source "$NVPM_SRC/ui/menu.sh"

# Fetch the latest scripts from GitHub
fetch_latest_scripts() {
    log_info "Fetching the latest scripts from GitHub..."

    # Ensure NVPM_CACHE is set
    if [ -z "$NVPM_CACHE" ]; then
        log_error "NVPM_CACHE is not set"
        exit 1
    fi

    # Create necessary directories
    mkdir -p "$NVPM_CACHE"

    # Clone or update the repository in the cache directory
    if [ -d "$NVPM_CACHE/nvpm" ]; then
        git -C "$NVPM_CACHE/nvpm" pull origin main >/dev/null 2>&1
    else
        git clone "$NVPM_REPO" "$NVPM_CACHE/nvpm" >/dev/null 2>&1
    fi

    log_success "Fetched the latest scripts from GitHub"
}

# Show usage information
usage() {
    cat << EOF
NVPM - Neovim Profile Manager v${NVPM_VERSION}

Usage: nvpm <command> [options]

Commands:
    create <name>                  Create a new Neovim profile
    list                           List all available profiles
    global <name>                  Set a system wide global profile
    remove <name>                  Remove a profile
    current                        Show current active profile
    exec <program>                 Execute the given program with the NVIM_APPNAME set
    version                        Show NVPM version
    help                           Show this help message

Examples:
    nvpm create my-config
    nvpm list
    nvpm global my-config
    nvpm remove my-config
    nvpm exec nvim

For more information, visit: https://github.com/steven-mosley/nvpm
EOF
}

# Exec command to route through NVPM
exec_nvim() {
    local program="$1"
    shift

    # Determine the active profile
    local active_profile_name
    active_profile_name="$(cat "$NVPM_ROOT/global_profile" 2>/dev/null || echo "default")"
    
    if [ ! -f "$NVPM_ROOT/wrappers/$active_profile_name" ]; then
        log_error "Wrapper script does not exist for profile: $active_profile_name"
        exit 1
    fi
    
    NVIM_APPNAME="nvpm/$active_profile_name" exec /usr/bin/nvim "$@"
}

# Main entry point
main() {
    # Check if the fetch should be skipped
    if [[ " $* " != *" --skip-fetch "* ]]; then
        # Fetch the latest scripts
        fetch_latest_scripts
        # Re-run the script with --skip-fetch to prevent fetching again
        exec "$0" "$@" --skip-fetch
    else
        # Remove the --skip-fetch flag from the arguments
        set -- "${@/--skip-fetch/}"
        # Execute the appropriate command
        case "$1" in
            "create")
                create_profile "${@:2}"
                ;;
            "list")
                list_profiles
                ;;
            "global")
                global_profile "${@:2}"
                ;;
            "remove")
                remove_profile "${@:2}"
                ;;
            "current")
                current_profile
                ;;
            "exec")
                if [[ "$2" == "nvim" ]]; then
                    exec_nvim "${@:3}"
                else
                    log_error "Unknown exec target: $2"
                    usage
                    exit 1
                fi
                ;;
            "version")
                echo "nvpm version $NVPM_VERSION"
                ;;
            "help"|"--help"|"-h"|"")
                usage
                ;;
            *)
                # Display error message and usage, do not re-run the script
                log_error "Unknown command: $1"
                usage
                exit 1
                ;;
        esac
    fi
}

# Run the main function with all arguments
main "$@"
