#!/usr/bin/env bash
#
# NVPM - Neovim Profile Manager
# Version: 0.1.0
#
# A tool to manage multiple Neovim configurations

# Enable debug mode if NVPM_DEBUG is set
[[ -n "$NVPM_DEBUG" ]] && set -x

# Fail on errors
set -e

# Base directories
NVPM_ROOT="${NVPM_ROOT:-$HOME/.nvpm}"
NVPM_SHIMS="$NVPM_ROOT/shims"
CONFIG_DIR="$HOME/.config"
LOCAL_BIN="$HOME/.local/bin"
NVPM_VERSION="0.1.0"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}INFO:${NC} $1"
}

log_success() {
    echo -e "${GREEN}SUCCESS:${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}WARNING:${NC} $1"
}

log_error() {
    echo -e "${RED}ERROR:${NC} $1" >&2
}

# Core Functions

create_profile() {
    local profile_name="$1"
    
    if [ -z "$profile_name" ]; then
        log_error "Profile name is required"
        return 1
    fi
    
    local profile_dir="$CONFIG_DIR/$profile_name"
    
    log_info "Checking profile directory: $profile_dir"
    
    if [ -d "$profile_dir" ]; then
        log_warning "Directory already exists: $profile_dir"
        log_info "Using existing directory..."
    else
        log_info "Creating profile directory at: $profile_dir"
        mkdir -p "$profile_dir"
    fi

    # Create a minimal init.lua if no config exists
    if [ ! -f "$profile_dir/init.lua" ] && [ ! -f "$profile_dir/init.vim" ]; then
        log_info "Creating minimal init.lua..."
        cat > "$profile_dir/init.lua" << 'EOF'
-- Minimal init.lua for NVPM profile
vim.opt.compatible = false
vim.cmd('filetype plugin indent on')
vim.opt.syntax = 'on'

-- Set basic options
vim.opt.number = true
vim.opt.relativenumber = true
vim.opt.wrap = false
vim.opt.signcolumn = 'yes'
vim.opt.cursorline = true

-- Set default indentation
vim.opt.expandtab = true
vim.opt.shiftwidth = 4
vim.opt.tabstop = 4
vim.opt.softtabstop = 4
vim.opt.autoindent = true
EOF
        log_success "Created minimal init.lua"
    fi

    # Create shim directory if it doesn't exist
    mkdir -p "$NVPM_SHIMS"

    # First find the real system nvim
    local system_nvim
    system_nvim=$(which -a nvim | grep "^/usr/\|^/bin/" | head -n 1)

    if [ -z "$system_nvim" ]; then
        log_error "Could not find system nvim"
        return 1
    fi

    # Create the profile-specific wrapper
    local wrapper_path="$NVPM_SHIMS/nvim-$profile_name"
    cat > "$wrapper_path" << EOF
#!/usr/bin/env bash
exec env NVIM_APPNAME="$profile_name" "$system_nvim" "\$@"
EOF
    chmod +x "$wrapper_path"

    # Create symlink in local bin
    mkdir -p "$LOCAL_BIN"
    ln -sf "$wrapper_path" "$LOCAL_BIN/nvim-$profile_name"

    log_success "Profile '$profile_name' is ready to use"
    log_info "You can run it with: nvim-$profile_name"
    log_info "System nvim found at: $system_nvim"
}

switch_profile() {
    local profile_name="$1"
    
    if [ -z "$profile_name" ]; then
        log_error "Profile name is required"
        return 1
    fi
    
    # Check if profile exists
    if [ ! -d "$CONFIG_DIR/$profile_name" ]; then
        log_error "Profile '$profile_name' does not exist"
        return 1
    fi

    # Check if profile wrapper exists
    if [ ! -f "$NVPM_SHIMS/nvim-$profile_name" ]; then
        log_error "Profile wrapper does not exist. Try recreating the profile"
        return 1
    fi

    # Create/update the nvim symlink in shims directory
    ln -sf "nvim-$profile_name" "$NVPM_SHIMS/nvim"
    
    log_success "Set default profile to '$profile_name'"
    log_info "The 'nvim' command will now use this profile"
}

list_profiles() {
    local current_profile=$(get_current_profile)
    
    echo "Available Neovim profiles:"
    echo "------------------------"
    
    local found_profiles=0
    
    for dir in "$CONFIG_DIR"/*; do
        if [ -d "$dir" ]; then
            profile_name=$(basename "$dir")
            
            # Check if this is a valid NVPM profile
            if [ -f "$NVPM_SHIMS/nvim-$profile_name" ]; then
                local status=""
                local config_type=""
                
                # Determine configuration type
                if [ -f "$dir/init.lua" ]; then
                    config_type="lua"
                elif [ -f "$dir/init.vim" ]; then
                    config_type="vim"
                else
                    config_type="empty"
                fi
                
                # Show current profile with an asterisk
                if [ "$profile_name" = "$current_profile" ]; then
                    echo -e "${GREEN}* $profile_name${NC} ($config_type) [active]"
                else
                    echo "  $profile_name ($config_type)"
                fi
                
                found_profiles=1
            fi
        fi
    done
    
    if [ $found_profiles -eq 0 ]; then
        log_warning "No profiles found"
        log_info "To create a new profile, use: nvpm create <profile-name>"
    fi
    
    echo
    if [ -n "$current_profile" ]; then
        log_info "Current default profile: $current_profile"
    else
        log_warning "No default profile set"
        log_info "To set a default profile, use: nvpm switch <profile-name>"
    fi
}

get_current_profile() {
    local nvim_path
    
    if [ -L "$NVPM_SHIMS/nvim" ]; then
        nvim_path=$(readlink "$NVPM_SHIMS/nvim")
        basename "$nvim_path" | sed 's/^nvim-//'
    fi
}

backup_profiles() {
    local backup_dir="$NVPM_ROOT/backups"
    local date_stamp=$(date +%Y%m%d_%H%M%S)
    mkdir -p "$backup_dir"
    
    # Create backup metadata
    local metadata_file="$backup_dir/backup_${date_stamp}.meta"
    {
        echo "NVPM Backup Metadata"
        echo "-------------------"
        echo "Date: $(date -u)"
        echo "NVPM Version: $NVPM_VERSION"
        echo "User: $USER"
        echo "Hostname: $(hostname)"
        echo "Profiles:"
        for profile in "$CONFIG_DIR"/*; do
            if [ -d "$profile" ] && [ -f "$NVPM_SHIMS/nvim-$(basename "$profile")" ]; then
                echo "- $(basename "$profile")"
            fi
        done
    } > "$metadata_file"
    
    # Create the backup archive
    tar -czf "$backup_dir/nvpm_backup_$date_stamp.tar.gz" \
        -C "$CONFIG_DIR" \
        $(find "$CONFIG_DIR" -maxdepth 1 -mindepth 1 -type d -exec basename {} \; | \
          while read profile; do
              if [ -f "$NVPM_SHIMS/nvim-$profile" ]; then
                  echo "$profile"
              fi
          done) \
        2>/dev/null

    if [ $? -eq 0 ]; then
        log_success "Profiles backed up to: $backup_dir/nvpm_backup_$date_stamp.tar.gz"
        log_info "Backup metadata saved to: $metadata_file"
    else
        log_error "Backup failed"
        rm -f "$backup_dir/nvpm_backup_$date_stamp.tar.gz" "$metadata_file"
        return 1
    fi
}

restore_profiles() {
    local backup_file="$1"
    
    if [ -z "$backup_file" ]; then
        log_error "Usage: nvpm restore <backup-file>"
        return 1
    fi
    
    if [ ! -f "$backup_file" ]; then
        log_error "Backup file does not exist: $backup_file"
        return 1
    fi
    
    # Check if it's a valid backup
    if ! tar -tzf "$backup_file" >/dev/null 2>&1; then
        log_error "Invalid backup file"
        return 1
    fi
    
    log_warning "This will overwrite existing profiles with the same names."
    read -p "Continue? [y/N] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        # Create a temporary directory for restoration
        local temp_dir=$(mktemp -d)
        tar -xzf "$backup_file" -C "$temp_dir"
        
        # Restore each profile
        for profile in "$temp_dir"/*; do
            if [ -d "$profile" ]; then
                local profile_name=$(basename "$profile")
                log_info "Restoring profile: $profile_name"
                
                # Move profile to config directory
                rm -rf "$CONFIG_DIR/$profile_name"
                mv "$profile" "$CONFIG_DIR/"
                
                # Recreate wrapper
                create_profile "$profile_name"
            fi
        done
        
        # Cleanup
        rm -rf "$temp_dir"
        log_success "Profiles restored from: $backup_file"
    else
        log_info "Restore cancelled"
    fi
}

clean() {
    log_warning "This will remove NVPM and all profile configurations."
    log_warning "Your actual Neovim configurations will remain intact."
    read -p "Are you sure? [y/N] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        rm -rf "$NVPM_ROOT"
        rm -f "$LOCAL_BIN/nvpm"
        # Remove initialization from shell config files
        sed -i '/# nvpm initialization/d' ~/.bashrc 2>/dev/null
        sed -i '/nvpm.*sh/d' ~/.bashrc 2>/dev/null
        sed -i '/# nvpm initialization/d' ~/.zshrc 2>/dev/null
        sed -i '/nvpm.*sh/d' ~/.zshrc 2>/dev/null
        rm -f ~/.config/fish/conf.d/nvpm.fish 2>/dev/null
        log_success "NVPM has been removed."
    else
        log_info "Clean operation cancelled."
    fi
}

check_profile_health() {
    local profile_name="$1"
    
    if [ -z "$profile_name" ]; then
        log_error "Usage: nvpm health <profile-name>"
        return 1
    fi
    
    log_info "Checking health of profile: $profile_name"
    
    # Check directory structure
    [ -d "$CONFIG_DIR/$profile_name" ] && log_success "✓ Profile directory exists" || log_error "✗ Profile directory missing"
    [ -f "$NVPM_SHIMS/nvim-$profile_name" ] && log_success "✓ Profile wrapper exists" || log_error "✗ Profile wrapper missing"
    
    # Check config files
    [ -f "$CONFIG_DIR/$profile_name/init.lua" ] && log_success "✓ init.lua exists" || log_warning "- No init.lua found"
    [ -f "$CONFIG_DIR/$profile_name/init.vim" ] && log_success "✓ init.vim exists" || log_warning "- No init.vim found"
    
    # Check permissions
    if [ -d "$CONFIG_DIR/$profile_name" ]; then
        [ -r "$CONFIG_DIR/$profile_name" ] && log_success "✓ Profile directory is readable" || log_error "✗ Profile directory not readable"
        [ -w "$CONFIG_DIR/$profile_name" ] && log_success "✓ Profile directory is writable" || log_error "✗ Profile directory not writable"
    fi
}

version() {
    echo "nvpm version $NVPM_VERSION"
}

generate_completions() {
    # Bash completion
    cat > "$NVPM_ROOT/completions/nvpm.bash" << 'EOF'
_nvpm_complete() {
    local cur="${COMP_WORDS[COMP_CWORD]}"
    local prev="${COMP_WORDS[COMP_CWORD-1]}"
    
    case "$prev" in
        "nvpm")
            COMPREPLY=($(compgen -W "create list switch current doctor clean export import backup restore health version help" -- "$cur"))
            ;;
        "switch"|"export"|"health")
            # List available profiles
            local profiles=$(ls -1 "$HOME/.config" 2>/dev/null)
            COMPREPLY=($(compgen -W "$profiles" -- "$cur"))
            ;;
        *)
            COMPREPLY=()
            ;;
    esac
}

complete -F _nvpm_complete nvpm
EOF

    # Zsh completion
    cat > "$NVPM_ROOT/completions/nvpm.zsh" << 'EOF'
#compdef nvpm

_nvpm_complete() {
    local words cword
    
    read -Ac words
    read -cn cword
    
    local cur="${words[cword]}"
    local prev="${words[cword-1]}"
    
    case "$prev" in
        "nvpm")
            reply=("create" "list" "switch" "current" "doctor" "clean" "export" "import" "backup" "restore" "health" "version" "help")
            ;;
        "switch"|"export"|"health")
            # List available profiles
            reply=($(ls -1 "$HOME/.config" 2>/dev/null))
            ;;
        *)
            reply=()
            ;;
    esac
}

compctl -K _nvpm_complete nvpm
EOF

    # Fish completion
    cat > "$NVPM_ROOT/completions/nvpm.fish" << 'EOF'
function __nvpm_complete
    set -l cmd (commandline -opc)
    switch (count $cmd)
        case 1
            echo "create list switch current doctor clean export import backup restore health version help"
        case 2
            switch (string match -r '^nvpm (switch|export|health)' $cmd)
                case '*'
                    ls -1 ~/.config
            end
    end
end

complete -c nvpm -f -a '(__nvpm_complete)'
EOF
}

usage() {
    echo "NVPM - Neovim Profile Manager"
    echo "Version: $NVPM_VERSION"
    echo
    echo "Usage: nvpm <command> [options]"
    echo
    echo "Commands:"
    echo "  create <profile>        Create a new Neovim profile"
    echo "  list                    List available Neovim profiles"
    echo "  switch <profile>        Switch to a specific Neovim profile"
    echo "  current                 Show the current default Neovim profile"
    echo "  doctor                  Run diagnostics to check NVPM setup"
    echo "  clean                   Remove NVPM and all profile configurations"
    echo "  export <profile> <dir>  Export a Neovim profile to a directory"
    echo "  import <file>           Import a Neovim profile from a file"
    echo "  backup                  Backup all Neovim profiles"
    echo "  restore <file>          Restore Neovim profiles from a backup file"
    echo "  health <profile>        Check the health of a Neovim profile"
    echo "  version                 Show NVPM version information"
    echo "  help                    Show this help message"
}

# Main Entry Point
case "$1" in
    "create")
        create_profile "$2"
        ;;
    "list")
        list_profiles
        ;;
    "switch")
        switch_profile "$2"
        ;;
    "current")
        get_current_profile
        ;;
    "doctor")
        doctor
        ;;
    "clean")
        clean
        ;;
    "export")
        export_profile "$2" "$3"
        ;;
    "import")
        import_profile "$2"
        ;;
    "backup")
        backup_profiles
        ;;
    "restore")
        restore_profiles "$2"
        ;;
    "health")
        check_profile_health "$2"
        ;;
    "version")
        version
        ;;
    "help"|"")
        usage
        ;;
    *)
        log_error "Unknown command: $1"
        usage
        exit 1
        ;;
esac
